# -*- coding: utf-8 -*-
"""(fixed)PJ2_CF(Surprise).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gSdA73oNcOgEWE9l_2S3LLD5THoJnR_J
"""

from google.colab import drive
drive.mount('/content/drive')

"""> # **Collaborative Filtering (CF) using Surprise - a Simple Python Recommendation System Engine**"""

!pip install surprise

import pandas as pd
import numpy as np
from surprise import Dataset, Reader, KNNBaseline, SVD, SVDpp, BaselineOnly
from surprise.model_selection import cross_validate, GridSearchCV, train_test_split
from surprise.accuracy import rmse
import matplotlib.pyplot as plt

# Đọc dữ liệu từ file CSV đã lưu
training_data = pd.read_csv("/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data/training_data.csv")
test_data = pd.read_csv("/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data/test_data.csv")

# Hiển thị thông tin cơ bản
print(training_data.head())
print(training_data.info())

# Loại bỏ các bản ghi có giá trị null
training_data = training_data.dropna(subset=['ma_khach_hang_idx', 'ma_san_pham_idx', 'so_sao'])

# Kiểm tra khoảng giá trị của cột 'so_sao'
print(training_data['so_sao'].describe())

# Đảm bảo rằng rating nằm trong khoảng 1-5
training_data = training_data[(training_data['so_sao'] >= 1) & (training_data['so_sao'] <= 5)]

# Chuẩn bị dữ liệu cho Surprise
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(training_data[['ma_khach_hang_idx', 'ma_san_pham_idx', 'so_sao']], reader)

# Tạo trainset từ toàn bộ dữ liệu
trainset = data.build_full_trainset()

# Hiển thị thông tin ma trận người dùng - sản phẩm
print(f"Number of users: {trainset.n_users}, Number of items: {trainset.n_items}")
print(f"Sparsity: {1 - trainset.n_ratings / (trainset.n_users * trainset.n_items)}")

import time

# Chạy các thuật toán và đánh giá
algorithms = [KNNBaseline(), SVD(), SVDpp(), BaselineOnly()]
results = []

for algo in algorithms:
    # Ghi lại thời gian chạy
    start_time = time.time()

    # Cross-validation
    cv_results = cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

    # Tính toán thời gian và các thông số đánh giá
    end_time = time.time()
    elapsed_time = end_time - start_time

    algo_name = algo.__class__.__name__
    mean_rmse = np.mean(cv_results['test_rmse'])
    mean_mae = np.mean(cv_results['test_mae'])

    # Ghi lại kết quả
    results.append([algo_name, mean_rmse, mean_mae, elapsed_time])

# Hiển thị kết quả dưới dạng DataFrame
results_df = pd.DataFrame(results, columns=['Algorithm', 'RMSE', 'MAE', 'Time (seconds)'])
print(results_df)

results_df

"""## Tối ưu hóa siêu tham số"""

# Định nghĩa phạm vi siêu tham số cần tối ưu hóa
param_grid = {
    'k': [10, 20, 30, 40, 50],  # Số lượng hàng xóm
    'min_k': [1, 5, 10],  # Số hàng xóm tối thiểu
    'sim_options': {
        'name': ['pearson_baseline', 'cosine'],  # Loại hàm đo lường tương đồng
        'user_based': [True, False]  # Dựa trên người dùng hoặc sản phẩm
    }
}

# Sử dụng GridSearchCV để tìm bộ siêu tham số tốt nhất
grid_search = GridSearchCV(KNNBaseline, param_grid, measures=['rmse', 'mae'], cv=5)
grid_search.fit(data)

# Lấy bộ siêu tham số tốt nhất
best_params = grid_search.best_params['rmse']
print("Bộ siêu tham số tốt nhất cho KNNBaseline:")
print(best_params)

# Lấy điểm RMSE tốt nhất
best_rmse = grid_search.best_score['rmse']
print(f"Điểm RMSE tốt nhất: {best_rmse}")

"""## Áp dụng bộ siêu tham số tốt nhất lên mô hình KNNBaseline"""

import time
from surprise import KNNBaseline
from surprise.model_selection import train_test_split
from surprise.accuracy import rmse, mae

# Chia dữ liệu thành tập huấn luyện và kiểm tra
trainset, testset = train_test_split(data, test_size=0.2, random_state=42)

# Khởi tạo mô hình với bộ siêu tham số tốt nhất
optimized_knn = KNNBaseline(
    k=20,
    min_k=1,
    sim_options={
        'name': 'pearson_baseline',
        'user_based': False
    }
)

# Huấn luyện mô hình trên tập huấn luyện
optimized_knn.fit(trainset)

# Đo thời gian dự đoán
start_time = time.time()
predictions = optimized_knn.test(testset)
end_time = time.time()

# Tính toán thời gian dự đoán
prediction_time = end_time - start_time

# Đánh giá hiệu năng mô hình
print("Kết quả đánh giá trên tập kiểm tra:")
rmse_value = rmse(predictions)
mae_value = mae(predictions)

# In thêm thông tin chi tiết
print(f"RMSE trên tập kiểm tra: {rmse_value}")
print(f"MAE trên tập kiểm tra: {mae_value}")
print(f"Thời gian dự đoán trên tập kiểm tra: {prediction_time:.4f} giây")

# Trích xuất một số dự đoán mẫu
print("\nMột số dự đoán mẫu:")
for prediction in predictions[:10]:  # Hiển thị 10 dự đoán đầu tiên
    print(f"User: {prediction.uid}, Item: {prediction.iid}, True rating: {prediction.r_ui:.2f}, Predicted rating: {prediction.est:.2f}")

"""## Gợi ý cho khách hàng"""

import pandas as pd
from surprise import Dataset, Reader, KNNBaseline, SVD, SVDpp, BaselineOnly
from surprise.model_selection import train_test_split
import joblib

# Đọc thêm dữ liệu sản phẩm và khách hàng
san_pham_file = "/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data/san_pham_output.csv"  # Đường dẫn đến file sản phẩm
khach_hang_file = '/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data/Khach_hang.csv'  # Đường dẫn đến file khách hàng

san_pham_df = pd.read_csv(san_pham_file)
df_khach_hang = pd.read_csv(khach_hang_file)

# Đảm bảo kiểu dữ liệu là int64 cho các cột ID
training_data['ma_khach_hang'] = training_data['ma_khach_hang'].astype('int64')
training_data['ma_san_pham'] = training_data['ma_san_pham'].astype('int64')
test_data['ma_khach_hang'] = test_data['ma_khach_hang'].astype('int64')
test_data['ma_san_pham'] = test_data['ma_san_pham'].astype('int64')

san_pham_df['ma_san_pham'] = san_pham_df['ma_san_pham'].astype('int64')
df_khach_hang['ma_khach_hang'] = df_khach_hang['ma_khach_hang'].astype('int64')

# Chuẩn bị dữ liệu cho Surprise
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(training_data[['ma_khach_hang', 'ma_san_pham', 'so_sao']], reader)
trainset = data.build_full_trainset()

# Huấn luyện mô hình
algo = KNNBaseline()
algo.fit(trainset)

# Gợi ý sản phẩm cho khách hàng
def recommend_products_for_customer(customer_id, df, algo, san_pham_df, df_khach_hang, top_n=10, min_rating=4):
    """
    Gợi ý sản phẩm cho khách hàng dựa trên mô hình đã huấn luyện.

    :param customer_id: ID của khách hàng cần gợi ý sản phẩm.
    :param df: DataFrame chứa dữ liệu gốc.
    :param algo: Mô hình đã huấn luyện.
    :param san_pham_df: DataFrame chứa thông tin sản phẩm.
    :param df_khach_hang: DataFrame chứa thông tin khách hàng.
    :param top_n: Số lượng sản phẩm cần gợi ý.
    :param min_rating: Điểm tối thiểu để chọn sản phẩm gợi ý.
    """
    # Lấy danh sách sản phẩm khách hàng đã đánh giá
    customer_purchased = df[df['ma_khach_hang'] == int(customer_id)][['ma_san_pham', 'so_sao']]
    customer_purchased = customer_purchased.merge(san_pham_df, on='ma_san_pham', how='left')
    customer_purchased = customer_purchased.sort_values(by='so_sao', ascending=False)

    # Hiển thị danh sách sản phẩm đã đánh giá
    print(f"Products that Customer {customer_id} has already rated:")
    print(customer_purchased[['ma_san_pham', 'ten_san_pham', 'so_sao']])

    # Lấy danh sách sản phẩm chưa được mua
    all_product_ids = df['ma_san_pham'].unique()
    products_to_predict = [prod_id for prod_id in all_product_ids if prod_id not in customer_purchased['ma_san_pham'].tolist()]

    # Dự đoán điểm cho các sản phẩm chưa được mua
    predictions = [algo.predict(customer_id, prod_id) for prod_id in products_to_predict]
    predictions_df = pd.DataFrame([(pred.iid, pred.est) for pred in predictions], columns=['ma_san_pham', 'EstimateScore'])

    # Lọc sản phẩm dựa trên điểm dự đoán
    filtered_predictions = predictions_df[predictions_df['EstimateScore'] >= min_rating]
    recommendations = filtered_predictions.merge(san_pham_df, on='ma_san_pham', how='left')

    # Sắp xếp và lấy top_n sản phẩm
    recommendations = recommendations.sort_values(by='EstimateScore', ascending=False).head(top_n)

    # Thêm thông tin khách hàng
    recommendations['ma_khach_hang'] = int(customer_id)
    recommendations = recommendations.merge(df_khach_hang[['ma_khach_hang', 'ho_ten']], on='ma_khach_hang', how='left')

    # Lọc chỉ các cột cần thiết
    recommendations = recommendations[['ma_san_pham', 'ten_san_pham', 'mo_ta', 'gia_ban', 'EstimateScore', 'ma_khach_hang', 'ho_ten']]

    # Hiển thị danh sách sản phẩm gợi ý
    print(f"\nRecommended Products for Customer {customer_id}:")
    print(recommendations[['ma_san_pham', 'ten_san_pham', 'mo_ta', 'gia_ban', 'EstimateScore', 'ho_ten']])

    return recommendations

customer_id = 365  # Thay bằng ID khách hàng cụ thể
recommended_products_365 = recommend_products_for_customer(customer_id, training_data, algo, san_pham_df, df_khach_hang, top_n=10, min_rating=4)

recommended_products_365.head(5)

customer_id = 199  # Thay bằng ID khách hàng cụ thể
recommended_products_199 = recommend_products_for_customer(customer_id, training_data, algo, san_pham_df, df_khach_hang, top_n=10, min_rating=4)

recommended_products_199

customer_id = 567  # Thay bằng ID khách hàng cụ thể
recommended_products_567 = recommend_products_for_customer(customer_id, training_data, algo, san_pham_df, df_khach_hang, top_n=10, min_rating=4)

recommended_products_567

print(recommended_products_567['ten_san_pham'])

import joblib
# Lưu mô hình và dữ liệu
model_save_path = "/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data_gui/KNNBaseline_model(1).joblib"
joblib.dump(algo, model_save_path)

training_data_path = "/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data_gui/training_data.csv"

# Lưu san_pham_df vào Google Drive
san_pham_df.to_csv('/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data_gui/san_pham_df.csv', index=False)

# Lưu df_khach_hang vào Google Drive
df_khach_hang.to_csv('/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data_gui/df_khach_hang.csv', index=False)

import os
print(os.path.exists("/content/drive/MyDrive/LDS7_K299_Online_Hoàng Ngọc Thủy Thương/Project_2/data_gui/KNNBaseline_model(1).joblib"))

